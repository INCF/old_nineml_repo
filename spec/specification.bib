% This file was created with JabRef 2.10.
% Encoding: UTF-8


@Article{Abbott1999,
  Title                    = {{Lapicque's introduction of the integrate-and-fire model neuron (1907)}},
  Author                   = {Abbott, L. F.},
  Journal                  = {Brain Research Bulletin},
  Year                     = {1999},
  Number                   = {99},
  Pages                    = {303--304},
  Volume                   = {50},

  Abstract                 = {Branching morphogenesis in the kidney is tightly regulated. Whereas disruption of certain pathways produces catastrophic effects, numerous instances exist in which mutation of ostensibly key molecules has minimal apparent phenotypic consequence. We suggest how the network structure of gene interactions in the branching program might explain these findings as well as apparant discrepancies between in vivo and in vitro studies. Emerging genetic, cell-biological, and microarray data should help test and/or clarify these ideas.},
  Doi                      = {10.1016/S0361-9230(99)00161-6},
  File                     = {:Users/tclose/References/Abbott/Brain Research Bulletin/Abbott - 1999 - Lapicque's introduction of the integrate-and-fire model neuron (1907).pdf:pdf},
  ISBN                     = {0361-9230},
  ISSN                     = {03619230},
  Mendeley-groups          = {Neurons/Mathematical},
  Pmid                     = {10643408}
}

@Article{Brette2009,
  Title                    = {{Simulation of networks of spiking neurons: A review of tools and strategies}},
  Author                   = {Brette, Romain and Rudolph, Michelle and Carnevale, Ted and Hines, Michael and Beeman, David and James, M and Diesmann, Markus and Morrison, Abigail and Goodman, Philip H and Jr, Frederick C Harris and Zirpe, Milind and Natschl\"{a}ger, Thomas and Pecevski, Dejan and Ermentrout, Bard and Djurfeldt, Mikael and Lansner, Anders and Rochel, Olivier and Vieville, Thierry and Muller, Eilif and Davison, Andrew P and El, Sami and Destexhe, Alain},
  Journal                  = {Journal of computational neuroscience},
  Year                     = {2009},
  Number                   = {3},
  Pages                    = {349--398},
  Volume                   = {23},

  Doi                      = {10.1007/s10827-007-0038-6.Simulation},
  File                     = {:Users/tclose/References/Brette et al/Journal of computational neuroscience/Brette et al. - 2009 - Strategies.pdf:pdf},
  Mendeley-groups          = {Software/Modelling}
}

@Article{Cannon2014,
  Title                    = {{LEMS: a language for expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2.}},
  Author                   = {Cannon, Robert C and Gleeson, Padraig and Crook, Sharon and Ganapathy, Gautham and Marin, Boris and Piasini, Eugenio and Silver, R Angus},
  Journal                  = {Frontiers in neuroinformatics},
  Year                     = {2014},

  Month                    = jan,
  Number                   = {September},
  Pages                    = {79},
  Volume                   = {8},

  Abstract                 = {Computational models are increasingly important for studying complex neurophysiological systems. As scientific tools, it is essential that such models can be reproduced and critically evaluated by a range of scientists. However, published models are currently implemented using a diverse set of modeling approaches, simulation tools, and computer languages making them inaccessible and difficult to reproduce. Models also typically contain concepts that are tightly linked to domain-specific simulators, or depend on knowledge that is described exclusively in text-based documentation. To address these issues we have developed a compact, hierarchical, XML-based language called LEMS (Low Entropy Model Specification), that can define the structure and dynamics of a wide range of biological models in a fully machine readable format. We describe how LEMS underpins the latest version of NeuroML and show that this framework can define models of ion channels, synapses, neurons and networks. Unit handling, often a source of error when reusing models, is built into the core of the language by specifying physical quantities in models in terms of the base dimensions. We show how LEMS, together with the open source Java and Python based libraries we have developed, facilitates the generation of scripts for multiple neuronal simulators and provides a route for simulator free code generation. We establish that LEMS can be used to define models from systems biology and map them to neuroscience-domain specific simulators, enabling models to be shared between these traditionally separate disciplines. LEMS and NeuroML 2 provide a new, comprehensive framework for defining computational models of neuronal and other biological systems in a machine readable format, making them more reproducible and increasing the transparency and accessibility of their underlying structure and properties.},
  Doi                      = {10.3389/fninf.2014.00079},
  File                     = {:Users/tclose/References/Cannon et al/Frontiers in neuroinformatics/Cannon et al. - 2014 - LEMS a language for expressing complex biological models in concise and hierarchical form and its use in underpin.pdf:pdf},
  ISSN                     = {1662-5196},
  Keywords                 = {model description language,model description language, standardization, simulation, spiking neural networks, model sharing,model sharing,simulation,spiking neural networks,standardization},
  Mendeley-groups          = {Software/Modelling/Neuroinformatics},
  Pmid                     = {25309419},
  Url                      = {http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=4174883\&tool=pmcentrez\&rendertype=abstract}
}

@Book{carnevale2006neuron,
  Title                    = {The NEURON book},
  Author                   = {Carnevale, Nicholas T and Hines, Michael L},
  Publisher                = {Cambridge University Press},
  Year                     = {2006}
}

@Article{Davison2008,
  Title                    = {{PyNN: A Common Interface for Neuronal Network Simulators.}},
  Author                   = {Davison, Andrew P and Br\"{u}derle, Daniel and Eppler, Jochen and Kremkow, Jens and Muller, Eilif and Pecevski, Dejan and Perrinet, Laurent and Yger, Pierre},
  Journal                  = {Frontiers in neuroinformatics},
  Year                     = {2008},
  Number                   = {January},
  Pages                    = {11},
  Volume                   = {2},

  Abstract                 = {Computational neuroscience has produced a diversity of software for simulations of networks of spiking neurons, with both negative and positive consequences. On the one hand, each simulator uses its own programming or configuration language, leading to considerable difficulty in porting models from one simulator to another. This impedes communication between investigators and makes it harder to reproduce and build on the work of others. On the other hand, simulation results can be cross-checked between different simulators, giving greater confidence in their correctness, and each simulator has different optimizations, so the most appropriate simulator can be chosen for a given modelling task. A common programming interface to multiple simulators would reduce or eliminate the problems of simulator diversity while retaining the benefits. PyNN is such an interface, making it possible to write a simulation script once, using the Python programming language, and run it without modification on any supported simulator (currently NEURON, NEST, PCSIM, Brian and the Heidelberg VLSI neuromorphic hardware). PyNN increases the productivity of neuronal network modelling by providing high-level abstraction, by promoting code sharing and reuse, and by providing a foundation for simulator-agnostic analysis, visualization and data-management tools. PyNN increases the reliability of modelling studies by making it much easier to check results on multiple simulators. PyNN is open-source software and is available from http://neuralensemble.org/PyNN.},
  Doi                      = {10.3389/neuro.11.011.2008},
  File                     = {:Users/tclose/References/Davison et al/Frontiers in neuroinformatics/Davison et al. - 2008 - PyNN A Common Interface for Neuronal Network Simulators.pdf:pdf},
  ISBN                     = {1662-5196 (Electronic)$\backslash$r1662-5196 (Linking)},
  ISSN                     = {1662-5196},
  Keywords                 = {computational,interoperability,large-scale models,neuroscience,parallel computing,python,reproducibility,simulation,translation},
  Mendeley-groups          = {Software/Modelling},
  Pmid                     = {19194529}
}

@Article{Gleeson2010,
  Title                    = {NeuroML: A Language for Describing Data Driven Models of Neurons and Networks with a High Degree of Biological Detail},
  Author                   = {Gleeson, Padraig AND Crook, Sharon AND Cannon, Robert C. AND Hines, Michael L. AND Billings, Guy O. AND Farinella, Matteo AND Morse, Thomas M. AND Davison, Andrew P. AND Ray, Subhasis AND Bhalla, Upinder S. AND Barnes, Simon R. AND Dimitrova, Yoana D. AND Silver, R. Angus},
  Journal                  = {PLoS Comput Biol},
  Year                     = {2010},

  Month                    = {06},
  Number                   = {6},
  Volume                   = {6},

  Abstract                 = {<title>Author Summary</title>
<p>Computer modeling is becoming an increasingly valuable tool in the study of the complex interactions underlying the behavior of the brain. Software applications have been developed which make it easier to create models of neural networks as well as detailed models which replicate the electrical activity of individual neurons. The code formats used by each of these applications are generally incompatible however, making it difficult to exchange models and ideas between researchers. Here we present the structure of a neuronal model description language, NeuroML. This provides a way to express these complex models in a common format based on the underlying physiology, allowing them to be mapped to multiple applications. We have tested this language by converting published neuronal models to NeuroML format and comparing their behavior on a number of commonly used simulators. Creating a common, accessible model description format will expose more of the model details to the wider neuroscience community, thus increasing their quality and reliability, as for other Open Source software. NeuroML will also allow a greater “ecosystem” of tools to be developed for building, simulating and analyzing these complex neuronal systems.</p>
},
  Doi                      = {10.1371/journal.pcbi.1000815},
  Owner                    = {tclose},
  Publisher                = {Public Library of Science},
  Timestamp                = {2015.04.06},
  Url                      = {http://dx.doi.org/10.1371%2Fjournal.pcbi.1000815}
}

@Article{Goddard2001,
  Title                    = {{Towards NeuroML: model description methods for collaborative modelling in neuroscience}},
  Author                   = {Goddard, NH and Hucka, M},
  Journal                  = {{Philosophical Transactions of the Royal Society B: Biological Sciences}},
  Year                     = {2001},

  Month                    = aug,
  Number                   = {1412},
  Pages                    = {1209--28},
  Volume                   = {356},

  Abstract                 = {Biological nervous systems and the mechanisms underlying their operation exhibit astonishing complexity. Computational models of these systems have been correspondingly complex. As these models become ever more sophisticated, they become increasingly difficult to define, comprehend, manage and communicate. Consequently, for scientific understanding of biological nervous systems to progress, it is crucial for modellers to have software tools that support discussion, development and exchange of computational models. We describe methodologies that focus on these tasks, improving the ability of neuroscientists to engage in the modelling process. We report our findings on the requirements for these tools and discuss the use of declarative forms of model description--equivalent to object-oriented classes and database schema--which we call templates. We introduce NeuroML, a mark-up language for the neurosciences which is defined syntactically using templates, and its specific component intended as a common format for communication between modelling-related tools. Finally, we propose a template hierarchy for this modelling component of NeuroML, sufficient for describing models ranging in structural levels from neuron cell membranes to neural networks. These templates support both a framework for user-level interaction with models, and a high-performance framework for efficient simulation of the models.},
  Doi                      = {10.1098/rstb.2001.0910},
  File                     = {:Users/tclose/References/Goddard, Hucka/\ldots of the Royal \ldots/Goddard, Hucka - 2001 - Towards NeuroML model description methods for collaborative modelling in neuroscience.pdf:pdf},
  ISSN                     = {0962-8436},
  Keywords                 = {Animals,Computer Simulation,Cooperative Behavior,Humans,Models,Neurological,Neurosciences,Neurosciences: methods,Software},
  Mendeley-groups          = {Software/Modelling/Neuroinformatics},
  Pmid                     = {11545699},
  Url                      = {http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=1088511\&tool=pmcentrez\&rendertype=abstract http://rstb.royalsocietypublishing.org/content/356/1412/1209.short}
}

@Article{Izhikevich2003,
  Title                    = {{Simple model of spiking neurons.}},
  Author                   = {Izhikevich, E M and Izhikevich, E M},
  Journal                  = {IEEE Transactions on Neural Networks},
  Year                     = {2003},
  Number                   = {6},
  Pages                    = {1569--72},
  Volume                   = {14},

  Abstract                 = {A model is presented that reproduces spiking and bursting behavior of known types of cortical neurons. The model combines the biologically plausibility of Hodgkin-Huxley-type dynamics and the computational efficiency of integrate-and-fire neurons. Using this model, one can simulate tens of thousands of spiking cortical neurons in real time (1 ms resolution) using a desktop PC.},
  Doi                      = {10.1109/TNN.2003.820440},
  File                     = {:Users/tclose/References/Izhikevich, Izhikevich/IEEE transactions on neural networks a publication of the IEEE Neural Networks Council/Izhikevich, Izhikevich - 2003 - Simple model of spiking neurons.pdf:pdf},
  ISBN                     = {1045-9227 (Print)$\backslash$r1045-9227 (Linking)},
  ISSN                     = {1045-9227},
  Mendeley-groups          = {Neurons/Mathematical},
  Pmid                     = {18244602},
  Url                      = {http://www.ncbi.nlm.nih.gov/pubmed/18244602}
}

@Article{Vogels2005,
  Title                    = {{Signal Propagation and Logic Gating in Networks of Integrate-and-Fire Neurons}},
  Author                   = {Vogels, Tim P. and Abbott, L. F.},
  Journal                  = {The Journal of Neuroscience},
  Year                     = {2005},

  Month                    = nov,
  Number                   = {46},
  Pages                    = {10786 --10795},
  Volume                   = {25},

  Abstract                 = {Transmission of signals within the brain is essential for cognitive function, but it is not clear how neural circuits support reliable and accurate signal propagation over a sufficiently large dynamic range. Two modes of propagation have been studied: synfire chains, in which synchronous activity travels through feedforward layers of a neuronal network, and the propagation of fluctuations in firing rate across these layers. In both cases, a sufficient amount of noise, which was added to previous models from an external source, had to be included to support stable propagation. Sparse, randomly connected networks of spiking model neurons can generate chaotic patterns of activity. We investigate whether this activity, which is a more realistic noise source, is sufficient to allow for signal transmission. We find that, for rate-coded signals but not for synfire chains, such networks support robust and accurate signal reproduction through up to six layers if appropriate adjustments are made in synaptic strengths. We investigate the factors affecting transmission and show that multiple signals can propagate simultaneously along different pathways. Using this feature, we show how different types of logic gates can arise within the architecture of the random network through the strengthening of specific synapses.},
  Doi                      = {10.1523/JNEUROSCI.3508-05.2005},
  File                     = {:Users/tclose/References/Vogels, Abbott/The Journal of Neuroscience/Vogels, Abbott - 2005 - Signal Propagation and Logic Gating in Networks of Integrate-and-Fire Neurons.pdf:pdf;:Users/tclose/References/Vogels, Abbott/The Journal of Neuroscience/Vogels, Abbott - 2005 - Signal Propagation and Logic Gating in Networks of Integrate-and-Fire Neurons.html:html},
  Mendeley-groups          = {Theoretical Neuroscience,Neurons/Mathematical},
  Url                      = {http://www.jneurosci.org/content/25/46/10786.abstract http://www.jneurosci.org/content/25/46/10786.full.pdf http://www.jneurosci.org/content/25/46/10786.short}
}

