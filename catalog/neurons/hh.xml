<?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.net/9ML/1.0">
  <ComponentClass name="Hodgkin-Huxley">
    <sequence name="hh_regime">
      <union name="current_calculation">
        <sequence name="Regime10">
          <union name="sodium_state_update">
            <sequence name="sodium_activation_system">
              <union name="Regime0">
                <assignment to="alpha_m" name="Assignment0">
                  <MathInline>-0.1*(v+40)/(exp(-(v+40)/10) - 1)</MathInline>
                </assignment>
                <assignment to="beta_m" name="Assignment1">
                  <MathInline>4*exp(-(v+65)/18)</MathInline>
                </assignment>
              </union>
              <union name="Regime1">
                <assignment to="mtau" name="Assignment2">
                  <MathInline>1/(q10*(alpha_m + beta_m))</MathInline>
                </assignment>
                <assignment to="minf" name="Assignment3">
                  <MathInline>alpha_m/(alpha_m + beta_m)</MathInline>
                </assignment>
              </union>
              <ode bound_variable="t" name="ODE0" dependent_variable="m">
                <MathInline>(minf-m)/mtau</MathInline>
              </TimeDerivative>
            </sequence>
            <sequence name="sodium_inactivation_system">
              <union name="Regime3">
                <assignment to="alpha_h" name="Assignment4">
                  <MathInline>0.07*exp(-(v+65)/20)</MathInline>
                </assignment>
                <assignment to="beta_h" name="Assignment5">
                  <MathInline>1/(exp(-(v+35)/10) + 1)</MathInline>
                </assignment>
              </union>
              <union name="Regime4">
                <assignment to="htau" name="Assignment6">
                  <MathInline>1/(q10*(alpha_h + beta_h))</MathInline>
                </assignment>
                <assignment to="hinf" name="Assignment7">
                  <MathInline>alpha_h/(alpha_h + beta_h)</MathInline>
                </assignment>
              </union>
              <ode bound_variable="t" name="ODE1" dependent_variable="h">
                <MathInline>(hinf-h)/htau</MathInline>
              </TimeDerivative>
            </sequence>
          </union>
          <assignment to="gna" name="Assignment12">
            <MathInline>gnabar*m*m*m*h</MathInline>
          </assignment>
          <assignment to="ina" name="Assignment13">
            <MathInline>gna*(v - ena)</MathInline>
          </assignment>
        </sequence>
        <sequence name="Regime11">
          <sequence name="potassium_state_update">
            <union name="Regime7">
              <assignment to="alpha_n" name="Assignment8">
                <MathInline>-0.01*(v+55)/(exp(-(v+55)/y) - 1)</MathInline>
              </assignment>
              <assignment to="beta_n" name="Assignment9">
                <MathInline>0.125*exp(-(v+65)/80)</MathInline>
              </assignment>
            </union>
            <union name="Regime8">
              <assignment to="ntau" name="Assignment10">
                <MathInline>1/(q10*(alpha_n + beta_n))</MathInline>
              </assignment>
              <assignment to="ninf" name="Assignment11">
                <MathInline>alpha_n/(alpha_n + beta_n)</MathInline>
              </assignment>
            </union>
            <ode bound_variable="t" name="ODE2" dependent_variable="n">
              <MathInline>(ninf-n)/ntau</MathInline>
            </TimeDerivative>
          </sequence>
          <assignment to="gk" name="Assignment14">
            <MathInline>gkbar*n*n*n*n</MathInline>
          </assignment>
          <assignment to="ik" name="Assignment15">
            <MathInline>gk*(v - ek)</MathInline>
          </assignment>
        </sequence>
        <assignment to="il" name="Assignment16">
          <MathInline>gl*(v - el)</MathInline>
        </assignment>
      </union>
      <ode bound_variable="t" name="membrane_equation" dependent_variable="v">
        <MathInline>(ina + ik + il + Isyn)/C</MathInline>
      </TimeDerivative>
      <assignment to="spike" name="test_threshold_crossing">
        <MathInline>V &gt; theta</MathInline>
      </assignment>
    </sequence>
    <transition to="hh_regime" from="hh_regime" name="spike_emitted" condition="spike"/>
  </ComponentClass>
</NineML>
